// Code generated by go-bindata.
// sources:
// assets/assets.go
// assets/repos.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAssetsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetsAssetsGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsAssetsGo,
		"assets/assets.go",
	)
}

func assetsAssetsGo() (*asset, error) {
	bytes, err := assetsAssetsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/assets.go", size: 0, mode: os.FileMode(416), modTime: time.Unix(1460078709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReposHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x92\x51\x6f\x9b\x30\x10\xc7\xdf\xfd\x29\xae\x3c\x6d\x52\x02\x5d\x1f\xf6\xb0\xb1\x48\x2c\xc9\x36\xb6\x0a\xa6\x90\xae\xca\xa3\x03\x07\x58\x22\xb6\x67\x1f\xa5\x7c\xfb\x1d\x84\x49\xad\xca\x0b\x3a\xdf\xef\xee\xfe\xff\xb3\xe3\x9b\x5d\xbe\x3d\x9e\x7e\xef\xa1\xa5\x4b\xb7\x11\xf1\xcd\x7a\x2d\xb6\xc6\x8e\x4e\x35\x2d\xc1\xdd\xed\x87\x8f\xf0\xdd\x98\xa6\x43\x48\x75\x19\x42\xd2\x75\x30\xa7\x3c\x38\xf4\xe8\x9e\xb0\x0a\x85\xb8\x57\x25\x6a\x8f\x15\xf4\xba\x42\x07\xd4\x22\x24\x56\x96\xfc\x5b\x32\x2b\xf8\x83\xce\x2b\xa3\xe1\x2e\xbc\x85\x77\x13\x10\x2c\xa9\xe0\xfd\x67\x31\x9a\x1e\x2e\x72\x04\x6d\x08\x7a\x8f\xdc\x40\x79\xa8\x15\x0f\xc5\xe7\x12\x2d\x81\xd2\x50\x9a\x8b\xed\x94\xd4\x25\xc2\xa0\xa8\x9d\x87\x2c\x2d\x42\x71\x5a\x1a\x98\x33\x49\x66\x25\xd3\x96\xa3\xfa\x25\x05\x92\x84\x00\xfe\x5a\x22\xfb\x29\x8a\x86\x61\x08\xe5\xac\x32\x34\xae\x89\xba\x2b\xe5\xa3\xfb\x74\xbb\xcf\x8a\xfd\x9a\x95\x0a\xf1\xa0\x3b\xf4\x93\xd7\xbf\xbd\x72\x6c\xf0\x3c\x82\xb4\xac\xa3\x94\x67\x56\xd7\xc9\x01\x8c\x03\xd9\x38\xe4\x1c\x99\x49\xe7\xe0\x14\x29\xdd\xac\xc0\x9b\x9a\x06\xe9\x50\x54\xca\x93\x53\xe7\x9e\x5e\x2d\xe8\xbf\x2a\x76\xfa\x12\xe0\x15\x49\x0d\x41\x52\x40\x5a\x04\xf0\x35\x29\xd2\x62\x25\x1e\xd3\xe3\x8f\xfc\xe1\x08\x8f\xc9\xe1\x90\x64\xc7\x74\x5f\x40\x7e\x80\x6d\x9e\xed\xd2\x63\x9a\x67\x1c\x7d\x83\x24\x3b\xc1\xaf\x34\xdb\xad\x00\x79\x3d\x3c\x04\x9f\xad\x9b\xb4\xb3\x40\x35\xad\x6e\xba\xa9\x02\xf1\xd5\xf0\xda\x5c\xc5\x78\x8b\xa5\xaa\x55\xc9\x8e\x74\xd3\xcb\x06\xa1\x31\x4f\xe8\x34\x1b\x01\x8b\xee\xa2\xfc\x74\x79\x9e\xa5\x55\xa2\x53\x17\x45\x92\xe6\xf8\x8d\x9d\x50\xac\xd7\xfc\x8a\x96\xc7\xd4\xa2\xac\x36\xbc\xf3\x98\x14\x75\xb8\x39\xa0\x35\x5e\x91\x71\x23\xe3\x9e\xe2\xe8\x7a\x2c\xe2\xe8\x0a\xc6\x67\x53\x8d\x33\x2f\xa1\x75\x58\x7f\x09\x22\x37\x95\x04\x9b\x9f\x45\x9e\x2d\x35\x72\xe2\xaf\x20\xd7\xcd\x73\xfe\x05\x00\x00\xff\xff\x44\x78\xbc\x3f\xc5\x02\x00\x00")

func assetsReposHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReposHtml,
		"assets/repos.html",
	)
}

func assetsReposHtml() (*asset, error) {
	bytes, err := assetsReposHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/repos.html", size: 709, mode: os.FileMode(416), modTime: time.Unix(1460078489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/assets.go":  assetsAssetsGo,
	"assets/repos.html": assetsReposHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"assets.go":  &bintree{assetsAssetsGo, map[string]*bintree{}},
		"repos.html": &bintree{assetsReposHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
