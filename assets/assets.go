// Code generated by go-bindata.
// sources:
// assets/assets.go
// assets/repos.html
// assets/review.html
// assets/reviews.html
// assets/reviews.js
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAssetsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetsAssetsGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsAssetsGo,
		"assets/assets.go",
	)
}

func assetsAssetsGo() (*asset, error) {
	bytes, err := assetsAssetsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/assets.go", size: 0, mode: os.FileMode(416), modTime: time.Unix(1461131761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReposHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x72\xda\x30\x10\xbd\xfb\x2b\x36\xee\xa5\x9d\xc1\x76\xc2\x21\x87\xd4\xd0\x71\x81\xb6\x9e\x66\x20\x03\xa4\x99\x9c\x3a\xb2\xbd\xd8\xca\x08\x4b\x95\x04\x0e\x93\xe1\xdf\xbb\x32\x4e\x0a\xf4\xd0\x29\x17\x6b\xb5\x4f\xbb\x6f\xf7\x3d\xe2\x8b\xf1\x6c\xb4\x7c\xbc\x9b\x40\x65\xd7\x62\xe8\xc5\x17\x41\xe0\x8d\xa4\xda\x69\x5e\x56\x16\xfa\x97\x57\xd7\xf0\x55\xca\x52\x20\xa4\x75\x1e\x42\x22\x04\xb4\x29\x03\x1a\x0d\xea\x2d\x16\xa1\xe7\xdd\xf2\x1c\x6b\x83\x05\x6c\xea\x02\x35\xd8\x0a\x21\x51\x2c\xa7\x4f\x97\xe9\xc1\x0f\xd4\x86\xcb\x1a\xfa\xe1\x25\xbc\x77\x00\xbf\x4b\xf9\x1f\x3e\x7a\x3b\xb9\x81\x35\xdb\x41\x2d\x2d\x6c\x0c\x52\x01\x6e\x60\xc5\xa9\x29\x3e\xe7\xa8\x2c\xf0\x1a\x72\xb9\x56\x82\xb3\x3a\x47\x68\xb8\xad\xda\x26\x5d\x89\xd0\x7b\xec\x0a\xc8\xcc\x32\xc2\x32\x42\x2b\x8a\x56\xc7\x28\x60\xd6\xf3\x80\x7e\x95\xb5\xea\x26\x8a\x9a\xa6\x09\x59\xcb\x32\x94\xba\x8c\xc4\x01\x65\xa2\xdb\x74\x34\x99\x2e\x26\x01\x31\xf5\xbc\xfb\x5a\xa0\x71\xb3\xfe\xda\x70\x4d\x03\x66\x3b\x60\x8a\x78\xe4\x2c\x23\x76\x82\x35\x20\x35\xb0\x52\x23\xe5\xac\x74\x3c\x1b\xcd\x2d\xaf\xcb\x1e\x18\xb9\xb2\x0d\xd3\xe8\x15\xdc\x58\xcd\xb3\x8d\x3d\x59\xd0\x2b\x2b\x9a\xf4\x18\x40\x2b\x62\x35\xf8\xc9\x02\xd2\x85\x0f\x9f\x93\x45\xba\xe8\x79\x0f\xe9\xf2\xdb\xec\x7e\x09\x0f\xc9\x7c\x9e\x4c\x97\xe9\x64\x01\xb3\x39\x8c\x66\xd3\x71\xba\x4c\x67\x53\x8a\xbe\x40\x32\x7d\x84\xef\xe9\x74\xdc\x03\xa4\xf5\x50\x13\x7c\x56\xda\x71\x27\x82\xdc\xad\xce\x29\xb5\x40\x3c\x69\xbe\x92\x07\x32\x46\x61\xce\x57\x3c\xa7\x89\xea\x72\xc3\x4a\x84\x52\x6e\x51\xd7\x34\x08\x28\xd4\x6b\x6e\x9c\x78\x86\xa8\x15\x9e\xe0\x6b\x6e\x99\x6d\xe3\xbf\xc6\x09\xbd\x20\x20\x17\x75\x66\xaa\x90\x15\x43\xda\x79\x6c\xb9\x15\x38\x9c\xa3\x92\x86\x5b\xa9\x77\x04\x37\x36\x8e\x0e\xd7\x0e\x60\x72\xcd\x49\x67\xa3\xf3\x81\xef\xf4\x31\x24\x10\x7b\x62\xcf\x61\xd9\x9a\x8f\x29\x6e\x42\x72\x40\x7b\x47\x52\x65\x26\x72\x44\x05\xd3\x4f\x26\xba\x0a\xfb\x61\xff\xfa\xf5\x22\x5c\xf3\x3a\x7c\x32\xfe\x30\x8e\x0e\x45\x89\x47\x74\x20\x12\x67\xb2\x20\x93\x95\x01\x49\x38\xf0\x4b\x6e\x13\xa5\x34\xe3\x06\x1f\x30\xf3\x5b\x1a\x05\xdf\xba\x7c\x2e\x6b\xab\xa5\x10\xa8\x07\xbe\x20\xa6\x2d\xf1\x16\xd1\x61\x72\xc1\x8c\x19\xf8\x0e\x47\x7e\x43\xdd\xe5\x4e\xb3\x5a\x36\xe0\x1a\xa3\x0e\x32\xa6\x03\xe1\xfe\x36\x47\xd0\xf3\x52\x22\x58\x17\xc1\x55\xff\x28\x4f\x88\xec\xcf\xd2\x38\x9a\x9b\x38\xca\x8e\x9e\x47\xf4\xfe\xad\xf1\x49\x70\xc6\x82\x09\x6a\x5c\x33\x8b\x3f\x29\xf2\xdd\x84\x1a\x15\x32\x4b\x59\xaa\xee\x5c\xab\x8f\xba\xfc\x1f\x43\x06\x95\xc6\xd5\xc0\x8f\x8c\x33\x45\x1e\x69\xdc\x72\x6c\x4c\xe8\x2c\xf0\xee\x93\xab\x3b\x78\x79\x71\x9f\x30\x1d\xef\xf7\xfe\xb0\x0b\xee\x98\xad\xf6\xfb\x38\x62\xff\x9e\xe7\xed\xd8\x1d\xce\xfd\x72\xde\xf9\x5c\x7c\xa7\x7a\x6b\x82\xd6\x94\xbf\x03\x00\x00\xff\xff\x35\xab\x8a\xdf\xf2\x04\x00\x00")

func assetsReposHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReposHtml,
		"assets/repos.html",
	)
}

func assetsReposHtml() (*asset, error) {
	bytes, err := assetsReposHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/repos.html", size: 1266, mode: os.FileMode(416), modTime: time.Unix(1461129967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReviewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x94\x4d\x4f\xdb\x4c\x10\xc7\xcf\x8f\x3f\xc5\xe0\xd3\x53\x29\xb6\x21\xaa\x38\xd0\x10\xc9\x4d\xd2\xd6\x2a\x4a\xaa\x24\x14\x71\x5c\xdb\x13\x67\xd1\xc6\x6b\x76\xd7\x31\x11\xe2\xbb\x77\x76\x6d\x28\x29\x55\x0f\x40\x72\xb1\xd7\x33\xf3\xdf\xdf\xbc\x64\x06\x47\xe3\xd9\x68\x79\xfd\x63\x02\x6b\xb3\x11\x43\x6f\x70\x14\x04\xde\x48\x56\x3b\xc5\x8b\xb5\x81\xfe\xf1\xc9\x29\x7c\x95\xb2\x10\x08\x49\x99\x85\x10\x0b\x01\xce\xa4\x41\xa1\x46\xb5\xc5\x3c\xf4\xbc\x0b\x9e\x61\xa9\x31\x87\xba\xcc\x51\x81\x59\x23\xc4\x15\xcb\xe8\xd1\x59\x7a\xf0\x13\x95\xe6\xb2\x84\x7e\x78\x0c\xff\x5b\x07\xbf\x33\xf9\x1f\x3e\x79\x3b\x59\xc3\x86\xed\xa0\x94\x06\x6a\x8d\x24\xc0\x35\xac\x38\x5d\x8a\x77\x19\x56\x06\x78\x09\x99\xdc\x54\x82\xb3\x32\x43\x68\xb8\x59\xbb\x4b\x3a\x89\xd0\xbb\xee\x04\x64\x6a\x18\xf9\x32\xf2\xae\xe8\xb4\x7a\xee\x05\xcc\x78\x1e\xd0\x6f\x6d\x4c\x75\x16\x45\x4d\xd3\x84\xcc\x51\x86\x52\x15\x91\x68\xbd\x74\x74\x91\x8c\x26\xd3\xc5\x24\x20\x52\xcf\xbb\x2c\x05\x6a\x9b\xeb\x6d\xcd\x15\x25\x98\xee\x80\x55\xc4\x91\xb1\x94\xe8\x04\x6b\x40\x2a\x60\x85\x42\xb2\x19\x69\x39\x1b\xc5\x0d\x2f\x8b\x1e\x68\xb9\x32\x0d\x53\xe8\xe5\x5c\x1b\xc5\xd3\xda\xec\x15\xe8\x91\x8a\x32\x7d\xee\x40\x25\x62\x25\xf8\xf1\x02\x92\x85\x0f\x9f\xe3\x45\xb2\xe8\x79\x57\xc9\xf2\xdb\xec\x72\x09\x57\xf1\x7c\x1e\x4f\x97\xc9\x64\x01\xb3\x39\x8c\x66\xd3\x71\xb2\x4c\x66\x53\x3a\x7d\x81\x78\x7a\x0d\xdf\x93\xe9\xb8\x07\x48\xe5\xa1\x4b\xf0\xae\x52\x96\x9d\x00\xb9\x2d\x9d\xed\xd4\x02\x71\xef\xf2\x95\x6c\x61\x74\x85\x19\x5f\xf1\x8c\x32\x2a\x8b\x9a\x15\x08\x85\xdc\xa2\x2a\x29\x11\xa8\x50\x6d\xb8\xb6\xcd\xd3\x84\x96\x7b\x82\x6f\xb8\x61\xc6\x9d\x5f\xa4\x13\x7a\x41\x40\x53\xd4\x0d\xd3\x1a\x59\x3e\xa4\x9a\x0f\x0c\x37\x02\x87\x73\xdc\x72\x6c\x60\x8c\xd4\x24\xa1\x07\x51\xfb\xd5\xda\x75\xa6\x38\xb5\x59\xab\xec\xdc\xb7\xed\xd1\xd4\x1f\x76\xc3\xee\xc2\xc2\xcd\x1e\xab\xb8\x0e\x69\x00\xdc\x37\xea\x54\xaa\x23\xcb\x29\x98\xba\xd1\xd1\x49\xd8\x0f\xfb\xa7\x8f\x1f\xc2\x0d\x2f\xc3\x1b\xed\x0f\x07\x51\x2b\x4a\x18\x51\xcb\x31\x48\x65\x4e\x33\x56\x04\xd4\xc1\x73\xbf\xe0\x26\xae\x2a\xc5\xb8\xc6\x2b\x4c\x7d\x87\x91\xf3\xad\xb5\x67\xb2\x34\x4a\x0a\x81\x8a\xdc\xd0\xb4\xd8\xce\xa3\xf3\xc9\x04\xd3\xfa\xdc\xb7\x7e\x34\x6e\xa8\x3a\xdb\xbe\x55\x49\x1b\xf3\xdf\x7e\x80\x08\x36\x79\xd0\x7f\xf2\x77\x31\xa9\x2b\x8c\x2d\xf0\xd9\x20\x4a\x6d\x48\x44\x31\x7f\x0f\xfd\xb8\x17\x7a\x7f\x9f\xb7\xb5\x0c\x55\xa7\xf0\xf0\xf0\x14\xde\xa9\xef\x1d\x5e\x8b\x77\x5b\xa3\x36\xa8\xde\xc2\xe7\x24\x1e\x9f\xa8\x0e\x04\xea\x06\x6c\x8e\xab\xf7\x20\xb5\x5a\x24\x75\x10\xd2\x25\x53\x34\x59\xef\x43\x6a\x9c\xd6\xa1\x48\xc7\xd8\xfe\x8f\xde\x38\x9e\x2d\x6a\xfe\x5b\xec\x30\xb0\x7c\xf5\x9a\x82\x52\xd4\xbf\x70\x9e\x5e\xbb\x97\x3f\x37\x56\xa4\xed\x3e\xcc\xa2\x76\x64\xf4\x8b\xf5\x63\xf7\x8e\x5b\x43\x6e\x2b\xfe\x0a\x00\x00\xff\xff\xc4\x28\x8b\x73\x73\x07\x00\x00")

func assetsReviewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReviewHtml,
		"assets/review.html",
	)
}

func assetsReviewHtml() (*asset, error) {
	bytes, err := assetsReviewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/review.html", size: 1907, mode: os.FileMode(416), modTime: time.Unix(1461130993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReviewsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xdf\x6f\x9b\x48\x10\x7e\xe7\xaf\x98\x70\xd2\xe9\x4e\x32\x90\xf8\x21\x0f\x39\xec\x13\xe7\xf8\x5a\xd4\xc8\xae\x6c\xa7\x51\x9e\xaa\x05\xc6\x78\xa3\x65\x97\xee\xae\x4d\xac\xc8\xff\x7b\x67\x81\x44\x76\xa2\x4a\x55\x2b\x55\xe5\x65\x99\xfd\x3e\x66\xbe\xf9\x45\x7c\x76\x3d\x9f\xac\xee\x3f\x4e\x61\x63\x2b\x31\xf6\xe2\xb3\x20\xf0\x26\xaa\xde\x6b\x5e\x6e\x2c\x0c\xcf\x2f\x2e\xe1\x9d\x52\xa5\x40\x48\x65\x1e\x42\x22\x04\xb4\x90\x01\x8d\x06\xf5\x0e\x8b\xd0\xf3\x6e\x78\x8e\xd2\x60\x01\x5b\x59\xa0\x06\xbb\x41\x48\x6a\x96\xd3\xd1\x23\x03\xf8\x84\xda\x70\x25\x61\x18\x9e\xc3\x5f\x8e\xe0\xf7\x90\xff\xf7\x3f\xde\x5e\x6d\xa1\x62\x7b\x90\xca\xc2\xd6\x20\x39\xe0\x06\xd6\x9c\x82\xe2\x63\x8e\xb5\x05\x2e\x21\x57\x55\x2d\x38\x93\x39\x42\xc3\xed\xa6\x0d\xd2\xbb\x08\xbd\xfb\xde\x81\xca\x2c\x23\x2e\x23\x76\x4d\xd6\xfa\x98\x05\xcc\x7a\x1e\xd0\xb3\xb1\xb6\xbe\x8a\xa2\xa6\x69\x42\xd6\xaa\x0c\x95\x2e\x23\xd1\xb1\x4c\x74\x93\x4e\xa6\xb3\xe5\x34\x20\xa5\x9e\x77\x2b\x05\x1a\x97\xeb\x97\x2d\xd7\x94\x60\xb6\x07\x56\x93\x8e\x9c\x65\xa4\x4e\xb0\x06\x94\x06\x56\x6a\x24\xcc\x2a\xa7\xb3\xd1\xdc\x72\x59\x0e\xc0\xa8\xb5\x6d\x98\x46\xaf\xe0\xc6\x6a\x9e\x6d\xed\x49\x81\x9e\x55\x51\xa6\xc7\x04\x2a\x11\x93\xe0\x27\x4b\x48\x97\x3e\xfc\x97\x2c\xd3\xe5\xc0\xbb\x4b\x57\xef\xe7\xb7\x2b\xb8\x4b\x16\x8b\x64\xb6\x4a\xa7\x4b\x98\x2f\x60\x32\x9f\x5d\xa7\xab\x74\x3e\x23\xeb\x7f\x48\x66\xf7\xf0\x21\x9d\x5d\x0f\x00\xa9\x3c\x14\x04\x1f\x6b\xed\xb4\x93\x40\xee\x4a\xe7\x3a\xb5\x44\x3c\x09\xbe\x56\x9d\x18\x53\x63\xce\xd7\x3c\xa7\x8c\x64\xb9\x65\x25\x42\xa9\x76\xa8\x25\x25\x02\x35\xea\x8a\x1b\xd7\x3c\x43\xd2\x0a\x4f\xf0\x8a\x5b\x66\x5b\xfb\x4d\x3a\xa1\x17\x04\x34\x45\xfd\x30\x6d\x90\x15\x63\xaa\x79\x6c\xb9\x15\x38\x5e\xe0\x8e\x63\x43\x54\x63\xe3\xa8\xbb\x72\xa0\xc9\x35\xa7\x1e\x1b\x9d\x8f\x7c\xd7\x1b\x43\xcd\x61\x0f\xec\x31\x2c\xdb\xc1\x63\x35\x37\x21\x75\xbf\xbd\xa3\x36\x65\x26\x72\x22\x05\xd3\x0f\x26\xba\x08\x87\xe1\xf0\xf2\xf9\x22\xac\xb8\x0c\x1f\x8c\x3f\x8e\xa3\xce\x29\x69\x88\x3a\x11\x71\xa6\x0a\x1a\xb0\x32\xa0\xf6\x8d\xfc\x92\xdb\xa4\xae\x35\xe3\x06\xef\x30\xf3\x5b\x19\x05\xdf\x39\x3c\x57\xd2\x6a\x25\x04\xea\x91\x2f\x48\x69\x27\xda\xb4\x9c\x9e\x95\x0b\x66\xcc\xc8\x77\x4c\x9a\x36\xd4\x3d\x76\x8a\x6a\xd5\x80\x0b\x8d\x3a\xc8\x98\x0e\x84\x5b\x9a\x23\xea\x6b\x57\x22\xa8\x8a\xe0\x62\x78\x84\x13\x23\x1b\xcf\x6b\x94\xd0\x4b\xb8\x8a\xa3\xec\xe8\xf3\x88\xbe\x7f\x09\x7c\x62\xbc\x52\xc1\x04\x05\x96\xcc\xe2\x67\xb2\x7c\x97\xa3\xc6\x1a\x99\x25\xb4\x6b\x08\x4d\xad\xa2\x38\xa7\x99\x7e\xa7\x44\x06\x1b\x8d\xeb\x91\x1f\x19\x37\x13\x79\xd4\xb9\x0c\xdd\x00\xfc\xf1\x2f\xc5\x51\xa3\xa7\x27\x77\x1c\x0e\x7f\x76\x50\x6b\xb7\x1c\x77\xb8\xb1\x3a\x1c\xfc\xf1\xcb\xa5\xd9\x56\x15\xd3\xfb\xc3\x21\x8e\xd8\x8f\x24\xfb\xf3\x25\x9f\x08\xe5\x7e\x65\xbf\xa0\xe8\x79\x1b\xe9\x37\x2e\xfb\x37\xf3\x7d\x79\xed\x5f\x5e\xaf\xf1\xa9\x2c\xf3\x66\x27\xdd\x32\xb6\xbb\xd9\xfe\x27\xbe\x06\x00\x00\xff\xff\x21\x4b\x0d\x13\x85\x06\x00\x00")

func assetsReviewsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReviewsHtml,
		"assets/reviews.html",
	)
}

func assetsReviewsHtml() (*asset, error) {
	bytes, err := assetsReviewsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/reviews.html", size: 1669, mode: os.FileMode(416), modTime: time.Unix(1461131110, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReviewsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x61\x6f\xe2\x46\x10\xfd\x8c\x7f\xc5\xc8\x8a\x7a\xe6\xea\x2e\xe9\x7d\xa8\xaa\xa2\x5c\x45\x73\x69\x6b\x35\x02\x09\x72\x8d\x4e\x69\x74\x5a\xcc\xd8\xac\xb4\xec\xee\xed\xae\x21\xa8\xca\x7f\xef\xac\x6d\xe0\x4c\x48\x1b\xb5\x3d\xbe\x80\x77\xde\xbc\x79\xf3\xc6\x3b\x0c\x5e\x47\x97\xda\x6c\xad\x28\x97\x1e\xde\x9c\x7f\xfb\x1d\xfc\xa2\x75\x29\x11\x32\x95\x33\x18\x49\x09\x75\xc8\x81\x45\x87\x76\x8d\x0b\x16\x45\xd7\x22\x47\xe5\x70\x01\x95\x5a\xa0\x05\xbf\x44\x18\x19\x9e\xd3\x57\x1b\x49\xe1\x77\xb4\x4e\x68\x05\x6f\xd8\x39\x24\x01\x10\xb7\xa1\xb8\x3f\x8c\xb6\xba\x82\x15\xdf\x82\xd2\x1e\x2a\x87\x44\x20\x1c\x14\x82\x8a\xe2\x43\x8e\xc6\x83\x50\x90\xeb\x95\x91\x82\xab\x1c\x61\x23\xfc\xb2\x2e\xd2\x52\xb0\xe8\x43\x4b\xa0\xe7\x9e\x13\x96\x13\xda\xd0\x53\xf1\x39\x0a\xb8\x8f\x22\xa0\xcf\xd2\x7b\xf3\xc3\x60\xb0\xd9\x6c\x18\xaf\x55\x32\x6d\xcb\x81\x6c\x50\x6e\x70\x9d\x5d\x5e\x8d\x67\x57\xdf\x90\xd2\x28\x7a\xaf\x24\xba\xd0\xeb\xa7\x4a\x58\x6a\x70\xbe\x05\x6e\x48\x47\xce\xe7\xa4\x4e\xf2\x0d\x68\x0b\xbc\xb4\x48\x31\xaf\x83\xce\x8d\x15\x5e\xa8\x32\x05\xa7\x0b\xbf\xe1\x16\xa3\x85\x70\xde\x8a\x79\xe5\x3b\x06\xed\x54\x51\xa7\x9f\x03\xc8\x22\xae\x20\x1e\xcd\x20\x9b\xc5\xf0\xd3\x68\x96\xcd\xd2\xe8\x36\xbb\xf9\x75\xf2\xfe\x06\x6e\x47\xd3\xe9\x68\x7c\x93\x5d\xcd\x60\x32\x85\xcb\xc9\xf8\x5d\x76\x93\x4d\xc6\xf4\xf4\x33\x8c\xc6\x1f\xe0\xb7\x6c\xfc\x2e\x05\x24\x7b\xa8\x08\x3e\x18\x1b\xb4\x93\x40\x11\xac\x0b\x93\x9a\x21\x76\x8a\x17\xba\x11\xe3\x0c\xe6\xa2\x10\x39\x75\xa4\xca\x8a\x97\x08\xa5\x5e\xa3\x55\xd4\x08\x18\xb4\x2b\xe1\xc2\xf0\x1c\x49\x5b\x44\x52\xac\x84\xe7\xbe\x7e\x7e\xd2\x0e\x8b\x5e\x0f\xa2\x68\xcd\x2d\x94\xc2\x8f\x8c\xb1\x5c\x38\xbc\xc5\xf9\x45\xe0\x95\xdc\xb2\x95\x5e\x54\x12\x93\xb8\x1b\x8e\x53\xb8\xbb\xa7\x17\x21\xea\x1e\xb3\x5c\x2b\x6f\xb5\x94\x68\x93\x58\x92\x4b\x53\x34\xda\x11\xb8\xa8\x54\x1e\x14\x24\x67\x8e\x26\x8d\xe9\x59\x98\x69\x1f\xfe\xac\xe7\x5b\x3f\xb0\x12\x7d\x12\x0f\xb8\x11\x03\x5b\x27\xf5\x99\xab\xf2\x9c\x0c\x49\xa2\xde\x3e\x9d\x0c\x32\xd4\x07\x52\x6a\xc3\xc4\x6a\xb0\xf0\xda\x0a\x74\x70\x01\x3b\xc0\xf0\x91\xd4\x3d\xbe\x48\xe1\x5a\xe0\xe6\x59\x8d\xe9\x99\xd4\x79\x6d\xde\x4e\x6d\xf0\x2a\x14\xa5\x62\xfb\x18\x73\xc8\x6d\xbe\x4c\xfa\x77\xaf\x42\xe8\xd5\xfd\xb0\x69\xec\x20\xb1\x96\x66\xf4\xf0\x64\xc3\x04\x52\x1f\x6d\x23\xe4\xc7\x00\xbb\x88\xe1\xeb\x1a\xff\x42\x13\x02\x41\xdb\x08\x15\x32\x56\x87\x94\xeb\x43\x77\xd3\x36\xe3\x90\x5a\xfb\x73\x4a\x4b\x2e\x35\x2d\x86\xff\xa4\xa6\xa1\xf8\x17\x7a\x6a\x41\x3b\xe2\x17\xa5\xd1\x4c\x7a\xcd\x40\x76\xc5\xee\xc8\xfb\x5e\xb8\x26\x49\x38\x17\xe1\x86\x77\xd0\x87\x11\xae\x45\xbd\xe0\x0e\xef\xcc\x9d\xb8\x67\xbb\xe3\xe1\x01\xb9\x40\x97\x3f\x41\x7d\xaa\xd0\x79\x16\x42\x56\x18\x7f\x48\x68\x85\x30\x53\xb9\x65\xa2\x70\x03\x8d\xf4\x64\xc7\x9b\xd6\x74\x29\x90\xe1\xb3\x6a\xb5\xe2\x76\x9b\x84\x83\x7e\x9f\xda\xef\x3d\x46\x3d\x8b\xbe\xb2\x6a\x47\xd3\x8c\xe8\xf1\xc8\x98\xe3\xdc\x83\x09\xae\x92\x9e\xa4\x86\xd3\x61\x73\x46\x12\xa4\x50\x98\xd1\xbd\x7f\x68\x23\x4c\x84\x87\x49\x91\xc4\x7f\xa8\xb0\xcc\x7b\xa2\x80\xa4\x83\x7b\x0b\xe7\x7b\xaf\x3a\xa4\x34\xff\x79\x58\x7d\xaa\x4c\xce\xd3\x0e\x77\x2b\x3f\x50\x35\x19\x4c\xa2\x2a\x69\xed\xbf\x85\xef\x4f\x90\xb5\x98\x0e\x1d\xe1\x8e\x3c\x08\x98\xd3\x16\x3c\xe3\xaa\x6b\x6c\xa9\xeb\x85\xff\x24\xd6\x99\xf2\x7e\xb2\x75\xa8\x1d\x6b\xeb\x55\x7d\xd4\xa6\xd3\x69\xfb\x6b\x57\xfc\x9f\x16\x09\x4d\xa4\x51\xf4\x45\xd6\xc8\xe1\x05\x7f\x16\x1c\x82\xfb\xad\xf3\x64\x9d\x86\xe8\xc7\x05\xd2\x5f\xad\x3c\xba\xd1\xf4\x15\x7f\xd5\x00\xda\xb3\xf0\xf3\x85\xf7\xbc\x65\x3c\xde\xba\x7f\xa7\x41\x14\xc5\xff\x29\x80\xe8\x4e\xed\xfc\xbf\x02\x00\x00\xff\xff\x76\x80\xf0\x45\x13\x09\x00\x00")

func assetsReviewsJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsReviewsJs,
		"assets/reviews.js",
	)
}

func assetsReviewsJs() (*asset, error) {
	bytes, err := assetsReviewsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/reviews.js", size: 2323, mode: os.FileMode(416), modTime: time.Unix(1461131731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/assets.go":    assetsAssetsGo,
	"assets/repos.html":   assetsReposHtml,
	"assets/review.html":  assetsReviewHtml,
	"assets/reviews.html": assetsReviewsHtml,
	"assets/reviews.js":   assetsReviewsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"assets.go":    &bintree{assetsAssetsGo, map[string]*bintree{}},
		"repos.html":   &bintree{assetsReposHtml, map[string]*bintree{}},
		"review.html":  &bintree{assetsReviewHtml, map[string]*bintree{}},
		"reviews.html": &bintree{assetsReviewsHtml, map[string]*bintree{}},
		"reviews.js":   &bintree{assetsReviewsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
