// Code generated by go-bindata.
// sources:
// assets/assets.go
// assets/repos.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAssetsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetsAssetsGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsAssetsGo,
		"assets/assets.go",
	)
}

func assetsAssetsGo() (*asset, error) {
	bytes, err := assetsAssetsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/assets.go", size: 0, mode: os.FileMode(416), modTime: time.Unix(1461127327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReposHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x92\x51\x6f\x9b\x30\x10\xc7\xdf\xfd\x29\xae\x3c\x6d\x52\x02\x5d\x1f\xf6\xb0\xb1\x48\x2c\xc9\x36\xb6\x0a\xa6\x90\xae\xca\xa3\x03\x07\x9c\x44\x6c\xcf\x36\xa5\x7c\xfb\x1d\x84\x49\xad\xca\x0b\x3a\xdf\xff\xee\x7e\xff\xb3\xe3\x9b\x5d\xbe\x3d\x9e\x7e\xef\xa1\xf5\x97\x6e\x23\xe2\x9b\xf5\x5a\x6c\xb5\x19\x2d\x35\xad\x87\xbb\xdb\x0f\x1f\xe1\xbb\xd6\x4d\x87\x90\xaa\x32\x84\xa4\xeb\x60\x4e\x39\xb0\xe8\xd0\x3e\x61\x15\x0a\x71\x4f\x25\x2a\x87\x15\xf4\xaa\x42\x0b\xbe\x45\x48\x8c\x2c\xf9\xb7\x64\x56\xf0\x07\xad\x23\xad\xe0\x2e\xbc\x85\x77\x93\x20\x58\x52\xc1\xfb\xcf\x62\xd4\x3d\x5c\xe4\x08\x4a\x7b\xe8\x1d\x72\x03\x72\x50\x13\x0f\xc5\xe7\x12\x8d\x07\x52\x50\xea\x8b\xe9\x48\xaa\x12\x61\x20\xdf\xce\x43\x96\x16\xa1\x38\x2d\x0d\xf4\xd9\x4b\xd6\x4a\x56\x1b\x8e\xea\x97\x2a\x90\x5e\x08\xe0\xaf\xf5\xde\x7c\x8a\xa2\x61\x18\x42\x39\x53\x86\xda\x36\x51\x77\x55\xb9\xe8\x3e\xdd\xee\xb3\x62\xbf\x66\x52\x21\x1e\x54\x87\x6e\xf2\xfa\xb7\x27\xcb\x06\xcf\x23\x48\xc3\x1c\xa5\x3c\x33\x5d\x27\x07\xd0\x16\x64\x63\x91\x73\x5e\x4f\x9c\x83\x25\x4f\xaa\x59\x81\xd3\xb5\x1f\xa4\x45\x51\x91\xf3\x96\xce\xbd\x7f\xb5\xa0\xff\x54\xec\xf4\xa5\x80\x57\x24\x15\x04\x49\x01\x69\x11\xc0\xd7\xa4\x48\x8b\x95\x78\x4c\x8f\x3f\xf2\x87\x23\x3c\x26\x87\x43\x92\x1d\xd3\x7d\x01\xf9\x01\xb6\x79\xb6\x4b\x8f\x69\x9e\x71\xf4\x0d\x92\xec\x04\xbf\xd2\x6c\xb7\x02\xe4\xf5\xf0\x10\x7c\x36\x76\x62\x67\x40\x9a\x56\x37\xdd\x54\x81\xf8\x6a\x78\xad\xaf\x30\xce\x60\x49\x35\x95\xec\x48\x35\xbd\x6c\x10\x1a\xfd\x84\x56\xb1\x11\x30\x68\x2f\xe4\xa6\xcb\x73\x8c\x56\x89\x8e\x2e\xe4\xa5\x9f\xe3\x37\x76\x42\xb1\x5e\xf3\x2b\x5a\x1e\x53\x8b\xb2\xda\xf0\xce\x63\x4f\xbe\xc3\xcd\x01\x8d\x76\xe4\xb5\x1d\x59\xee\x7c\x1c\x5d\x8f\x45\x1c\x5d\x85\xf1\x59\x57\xe3\xac\x97\xd0\x5a\xac\xbf\x04\x91\x34\x14\xd9\xa9\x2c\xd8\xfc\x2c\xf2\x6c\xa9\x93\x53\xcd\x55\xcc\xb5\xf3\xac\x7f\x01\x00\x00\xff\xff\x02\x3d\x29\xa4\xc9\x02\x00\x00")

func assetsReposHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReposHtml,
		"assets/repos.html",
	)
}

func assetsReposHtml() (*asset, error) {
	bytes, err := assetsReposHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/repos.html", size: 713, mode: os.FileMode(416), modTime: time.Unix(1461125975, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/assets.go":  assetsAssetsGo,
	"assets/repos.html": assetsReposHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"assets.go":  &bintree{assetsAssetsGo, map[string]*bintree{}},
		"repos.html": &bintree{assetsReposHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
