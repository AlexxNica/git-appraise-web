// Code generated by go-bindata.
// sources:
// assets/assets.go
// assets/repos.html
// assets/review.html
// assets/reviews.css
// assets/reviews.html
// assets/reviews.js
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAssetsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetsAssetsGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsAssetsGo,
		"assets/assets.go",
	)
}

func assetsAssetsGo() (*asset, error) {
	bytes, err := assetsAssetsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/assets.go", size: 0, mode: os.FileMode(416), modTime: time.Unix(1461770397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReposHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\x66\xd5\x4b\x0b\x58\xd2\xda\x0b\xe4\xb0\xb5\x5c\xb8\x49\xba\x35\xba\xb0\x8b\xd8\xdb\x20\xa7\x82\xa2\xc6\x12\x53\x8a\x54\x39\x74\x64\x63\x91\x7f\xef\x50\x56\x12\x3b\x45\xb1\x48\x7d\x91\x87\xf3\x34\xf3\xe6\xcd\xa3\xa6\xef\xae\x56\x97\x9b\xbb\xdf\xaf\xa1\xf6\x8d\x9e\x45\xd3\x77\x49\x12\x5d\xda\xf6\xe0\x54\x55\x7b\x98\xbc\x1f\x5f\xc0\x27\x6b\x2b\x8d\xb0\x30\x32\x85\xb9\xd6\xd0\xa7\x08\x1c\x12\xba\x07\x2c\xd3\x28\xfa\xac\x24\x1a\xc2\x12\x76\xa6\x44\x07\xbe\x46\x98\xb7\x42\xf2\x63\xc8\x8c\xe0\x0f\x74\xa4\xac\x81\x49\xfa\x1e\xbe\x0f\x80\x78\x48\xc5\x3f\xfc\x18\x1d\xec\x0e\x1a\x71\x00\x63\x3d\xec\x08\xb9\x80\x22\xd8\x2a\x6e\x8a\x7b\x89\xad\x07\x65\x40\xda\xa6\xd5\x4a\x18\x89\xd0\x29\x5f\xf7\x4d\x86\x12\x69\x74\x37\x14\xb0\x85\x17\x8c\x15\x8c\x6e\x39\xda\x9e\xa2\x40\xf8\x28\x02\xfe\xd5\xde\xb7\x1f\xb3\xac\xeb\xba\x54\xf4\x2c\x53\xeb\xaa\x4c\x1f\x51\x94\x7d\x5e\x5c\x5e\x2f\xd7\xd7\x09\x33\x8d\xa2\x2f\x46\x23\x85\x59\xff\xde\x29\xc7\x03\x16\x07\x10\x2d\xf3\x90\xa2\x60\x76\x5a\x74\x60\x1d\x88\xca\x21\xe7\xbc\x0d\x3c\x3b\xa7\xbc\x32\xd5\x08\xc8\x6e\x7d\x27\x1c\x46\xa5\x22\xef\x54\xb1\xf3\x67\x02\x3d\xb1\xe2\x49\x4f\x01\x2c\x91\x30\x10\xcf\xd7\xb0\x58\xc7\xf0\xf3\x7c\xbd\x58\x8f\xa2\xdb\xc5\xe6\xd7\xd5\x97\x0d\xdc\xce\x6f\x6e\xe6\xcb\xcd\xe2\x7a\x0d\xab\x1b\xb8\x5c\x2d\xaf\x16\x9b\xc5\x6a\xc9\xd1\x2f\x30\x5f\xde\xc1\x6f\x8b\xe5\xd5\x08\x90\xe5\xe1\x26\xb8\x6f\x5d\xe0\xce\x04\x55\x90\x2e\x6c\x6a\x8d\x78\xd6\x7c\x6b\x8f\x64\xa8\x45\xa9\xb6\x4a\xf2\x44\xa6\xda\x89\x0a\xa1\xb2\x0f\xe8\x0c\x0f\x02\x2d\xba\x46\x51\x58\x1e\x31\xb5\x32\xd2\xaa\x51\x5e\xf8\x3e\xfe\xd7\x38\x69\x94\x24\xec\xa2\xc1\x4c\x35\x8a\x72\xc6\x9a\x4f\xbd\xf2\x1a\x67\x37\xd8\x5a\x52\xde\xba\x03\xc3\xc9\x4f\xb3\xe3\x71\x00\x68\x65\xfe\x62\x95\x75\x1e\x93\x3f\xb0\xe4\x35\xa2\x8f\xa1\x76\xb8\xcd\xe3\xb0\x2f\xe2\x85\x35\x62\x2f\x4b\x93\x16\xd6\x7a\xd6\x4b\xb4\x21\x60\x57\x64\xcf\x07\xd9\x87\xf4\x43\x7a\x91\x49\xa2\x97\xb3\xb4\x51\x8c\x22\x8a\x21\xfb\x66\xa3\x8c\xc2\x5c\x32\x73\xf8\xa0\xb0\xa3\xd3\xd7\x1a\xf4\x02\x8c\x68\x30\x8f\x43\xae\xb5\x8e\xdf\x92\xd6\x78\x34\x3e\x8f\x3b\x55\xfa\x3a\x2f\xf9\x35\x89\x49\x1f\x8c\xd8\x0a\xec\x03\xa1\x13\x92\x42\x63\x3e\x8e\xfb\x32\x24\x9d\x62\x3b\x93\x93\x2f\x63\x89\x7b\xb1\x4f\xab\xfe\x8e\x89\x56\x51\x3f\x52\x38\x63\x47\x16\x94\x85\x7d\x68\xe1\xee\x29\x1b\xa7\x93\x74\x72\xf1\x74\xd0\xcf\x75\x4f\xf1\x6c\x9a\x1d\x8b\xb2\xdc\xd9\x51\xef\x69\x61\x4b\xbe\x4b\x55\xc2\x4e\xcd\xe3\x4a\xf9\x79\xdb\x3a\xa1\x08\x6f\xb1\x38\xd2\x28\xd5\x43\xc8\x07\xfe\xce\x6a\x8d\x2e\x8f\x35\x2f\xa4\xdf\x4f\x8f\x18\x30\x52\x0b\xa2\x3c\x0e\x38\xbe\x56\xe8\x86\xdc\x79\xd6\xd9\xee\xf9\xfc\xf5\x7b\x3a\x69\xca\x64\x3c\x39\xc9\x33\xa2\x1e\x3f\x01\x3c\xee\x7d\xc2\xbe\xf1\x6c\x22\x49\x85\xde\x61\x3c\xfb\xa4\x7c\xf2\x44\x18\x98\x31\x4f\x35\x3e\x29\x9f\x71\xfd\x67\x16\x67\xc1\x39\x25\x08\x5a\xa0\x4b\x0a\xe1\xde\xc6\xae\x78\xb1\xa9\x42\xfa\x38\xcd\x8a\xff\xd3\x5d\x68\x9e\xc9\x08\x8f\x7f\x06\x79\x82\xd8\x0e\x5b\x14\xec\x15\x7e\xf6\xdf\x09\x77\xd2\xe5\x6d\x0c\xc5\x7f\xd8\x35\x5c\xba\xef\x7e\x0a\x75\xf3\xaf\x5f\xc3\x23\x55\xe5\xe3\x63\x3c\x1b\x82\xe0\xde\xc7\xc7\x69\x26\xbe\x3d\xcf\xf3\xdf\xe1\xcf\x6b\xeb\xbe\xee\xfc\xda\x87\xc1\x80\xbd\x1f\xfb\xcf\xc0\x3f\x01\x00\x00\xff\xff\x70\x50\xec\xfd\x64\x06\x00\x00")

func assetsReposHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReposHtml,
		"assets/repos.html",
	)
}

func assetsReposHtml() (*asset, error) {
	bytes, err := assetsReposHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/repos.html", size: 1636, mode: os.FileMode(416), modTime: time.Unix(1461393701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReviewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x51\x6f\xdb\x36\x10\x7e\xae\x7e\xc5\x55\x2f\xdd\x80\x58\x8a\xd3\x21\x18\x32\x3b\x80\x97\x64\x9b\xb1\xc2\x19\x62\x77\x45\x9f\x06\x4a\x3a\x4b\xec\x24\x51\x25\xa9\x38\x41\xea\xff\xbe\x23\x25\xdb\xb2\xec\xda\x6e\xba\x38\x2f\x32\x79\xc7\xbb\xef\xbe\x3b\x1e\xc9\xf4\x5e\x5f\xdf\x5e\x4d\x3e\xfe\x75\x03\x89\xce\xd2\x4b\xa7\xf7\xba\xd3\x71\xae\x44\xf1\x28\x79\x9c\x68\x38\x3b\xed\x9e\xc3\xef\x42\xc4\x29\xc2\x30\x0f\x3d\x18\xa4\x29\x58\x91\x02\x89\x0a\xe5\x3d\x46\x9e\xe3\xbc\xe3\x21\xe6\x0a\x23\x28\xf3\x08\x25\xe8\x04\x61\x50\xb0\x90\x3e\xb5\xe4\x04\xfe\x46\xa9\xb8\xc8\xe1\xcc\x3b\x85\x1f\x8c\x82\x5b\x8b\xdc\x1f\x7f\x71\x1e\x45\x09\x19\x7b\x84\x5c\x68\x28\x15\x92\x01\xae\x60\xca\xc9\x29\x3e\x84\x58\x68\xe0\x39\x84\x22\x2b\x52\xce\xf2\x10\x61\xc6\x75\x62\x9d\xd4\x26\x3c\xe7\x63\x6d\x40\x04\x9a\x91\x2e\x23\xed\x82\x46\xd3\xa6\x16\x30\xed\x38\x40\x7f\x89\xd6\xc5\x85\xef\xcf\x66\x33\x8f\x59\x94\x9e\x90\xb1\x9f\x56\x5a\xca\x7f\x37\xbc\xba\x19\x8d\x6f\x3a\x84\xd4\x71\xde\xe7\x29\x2a\x13\xeb\xe7\x92\x4b\x0a\x30\x78\x04\x56\x10\x8e\x90\x05\x84\x2e\x65\x33\x10\x12\x58\x2c\x91\x64\x5a\x18\x9c\x33\xc9\x35\xcf\xe3\x13\x50\x62\xaa\x67\x4c\xa2\x13\x71\xa5\x25\x0f\x4a\xbd\x46\xd0\x02\x15\x45\xda\x54\x20\x8a\x58\x0e\xee\x60\x0c\xc3\xb1\x0b\xbf\x0e\xc6\xc3\xf1\x89\xf3\x61\x38\xf9\xe3\xf6\xfd\x04\x3e\x0c\xee\xee\x06\xa3\xc9\xf0\x66\x0c\xb7\x77\x70\x75\x3b\xba\x1e\x4e\x86\xb7\x23\x1a\xfd\x06\x83\xd1\x47\xf8\x73\x38\xba\x3e\x01\x24\x7a\xc8\x09\x3e\x14\xd2\x60\x27\x80\xdc\x50\x67\x32\x35\x46\x5c\x73\x3e\x15\x15\x18\x55\x60\xc8\xa7\x3c\xa4\x88\xf2\xb8\x64\x31\x42\x2c\xee\x51\xe6\x14\x08\x14\x28\x33\xae\x4c\xf2\x14\x41\x8b\x9c\x94\x67\x5c\x33\x6d\xc7\x1b\xe1\x78\x4e\xa7\x43\x55\x54\x17\x53\x82\x2c\xba\x24\xce\x7b\x9a\xeb\x14\x2f\xef\xf0\x9e\xe3\x0c\xae\x91\x92\x94\xaa\x9e\x5f\xcd\x1a\x79\xca\xf3\x7f\x89\xe4\xb4\xef\x2a\xfd\x48\x8c\x27\x88\xda\x85\x44\xe2\xb4\xef\x9a\x74\x29\xca\x57\xc6\x1e\xc2\x28\xf7\x02\x21\x34\xd1\xc5\x0a\x33\xa0\xa2\xf0\x97\x13\xfe\x5b\xef\xad\x77\xee\x87\x4a\xad\xe6\xbc\x8c\x93\x96\x52\x2e\xf8\x7b\x1d\xf9\xca\x84\x15\xfa\xd2\xc2\x54\xcd\x65\x2a\x94\x9c\xca\x50\xc9\x70\x85\x87\x7d\x62\x0f\x5e\x6c\xf7\x06\x2b\xb8\xb2\x58\xcc\x1c\x55\x52\xa0\x7c\xc3\x63\xca\xe4\x27\xe5\x77\xbd\x33\xef\xec\x7c\x31\x61\x01\x7d\x52\xee\x65\xcf\xaf\x8c\x12\x4d\x7e\xc5\x53\x2f\x10\x11\xed\x81\xb8\x43\x15\xd6\x77\x63\xae\x07\x45\x21\x19\x57\xf8\x01\x03\xd7\xc2\x88\xf8\xbd\x91\x87\x22\xd7\x52\xa4\x29\x4a\x52\x43\x5d\xd1\x6a\x35\x6a\x9d\x30\x65\x4a\xf5\x5d\xa3\x47\xdb\x01\x65\x2d\x5b\x97\x4a\x31\x5b\xce\xb7\xd7\xa5\x9d\x2c\xea\x74\xcf\x1a\x72\xd2\x48\xba\x0b\x05\x8d\x0f\xba\x43\xf9\xd6\x94\xfc\x50\x05\x69\x89\x2e\x25\xb7\x10\x8a\x6b\x21\x1f\x2f\xe0\xe9\xa9\x60\x3a\x99\xcf\x29\xb2\x6e\xc3\x85\x4f\x3e\x96\x48\xd6\x06\xeb\xb0\xc0\xf0\x81\xb2\x13\x30\xf9\x6d\x08\x83\xcb\xba\xb6\x2e\x7a\x7e\xf0\x0c\xc7\xbb\xbd\x6d\x38\x33\xc4\x9b\x7d\xb1\xc3\xdb\x76\xd8\xa7\x6b\x96\x9e\x9e\xa2\x0a\xb5\x27\x6b\x83\xf3\xf9\x11\xb0\x7f\x2e\x51\x51\x02\xff\x47\xf0\xd6\xe2\xe2\x8b\xf2\x28\x51\xd8\x8e\x72\x87\xd3\x17\x08\xc3\x98\x26\xcb\x47\x08\x63\xc2\x24\xed\xe3\x17\x09\x43\x5b\xd3\xc7\x09\xe3\x1a\xab\x96\xf6\xfd\x5b\xa2\xa9\x11\x91\x55\xf7\x72\x33\xb2\x68\xe5\xcd\x74\x9a\x75\x0f\xc7\x68\x35\x7c\xba\x2b\x5d\x5f\xf5\xba\xea\xca\xa6\x97\x4b\x2c\x90\xe9\xbe\x6b\x6f\x3b\x74\x7d\x88\xc8\xaa\x67\x06\x74\x44\x38\xaf\xda\x68\x8d\x20\x67\x99\x15\x6e\x67\xab\x86\x7b\x6e\x18\x33\xda\x5e\x9a\xa8\x11\xad\xd8\xa0\x68\xcf\x32\xd9\x5a\xf6\x6a\xf9\x6d\x95\x48\x33\x08\x3a\x5d\x6d\x10\xd6\x82\x89\xe4\x1d\x4d\xec\xc5\xda\x3d\x03\x41\x57\x0a\xba\xfd\x58\x63\x7c\x5a\x19\xf2\xcc\x71\x5c\x2a\xe8\xf7\xe1\x4d\x2d\x7f\x63\xe0\x59\x99\x39\x81\x0e\x0b\xa9\x0b\x66\x41\x5e\x66\x41\xcd\xf8\x36\xfb\x65\x1e\x26\x74\x40\x93\x07\xf8\xf2\x05\xda\x52\x89\x19\xdd\x86\x8c\xf7\x86\x2b\xb3\xd9\xac\xa2\x21\xd8\x5a\x6f\xec\xb0\x8d\x92\x7f\x3e\x34\x16\x45\xd6\xf5\x91\x62\x5d\xb8\xdb\x16\xa9\x7c\xd9\x48\x57\x34\x1f\x64\xf2\x14\x96\x91\x1c\x10\xeb\x73\x2a\xe7\x14\x2c\x1b\x7b\x53\xf3\x1c\xcb\x75\xb0\x07\x90\xb1\xcd\xfa\xab\x63\x34\xb8\x2b\x6a\x54\x3c\x2f\x05\x21\x1a\xd2\x55\x2f\x96\x6c\x4f\x67\xdf\x89\x83\xa5\x74\x25\xc8\x99\xc6\x7f\xda\x5d\x83\xbe\x42\xda\x37\xde\xaa\xc5\x9b\x19\xb5\x24\xa7\x1a\xd7\xf4\xec\x0e\xe3\x27\x43\x58\xad\xaf\x39\x75\x4a\xcd\xb2\x62\xf3\x7c\xd8\xbd\x90\x1e\x40\xf9\x66\x2a\xb7\x2e\x6a\x41\x2c\x65\xba\x4e\x23\xab\x1f\x17\x4b\xdb\xa4\x31\x9f\x37\x7c\x55\x41\x19\x67\xec\x5b\x0e\xcc\x95\xe7\xd7\x4d\xd7\x5b\xcc\x1e\xe3\x24\x54\x61\xa9\xf6\xdc\x84\x77\xde\x33\x9a\xe5\xa0\x89\x30\x16\x35\xcb\x81\x5e\x56\x19\x25\xe4\xeb\x99\x6f\x3f\x73\xb6\xb9\x58\xef\x68\xdb\x0b\x60\xb2\x28\x98\x8b\x8d\x5d\xbc\x75\xc9\xcf\x86\xf0\x0a\xef\x02\xe4\x8e\xa2\xdb\xd3\x2a\x0f\x05\x39\x28\x75\x22\xe4\x77\x20\x64\xd6\xc0\xb3\xe0\xf5\x0a\x89\x9b\x06\x5b\x37\x31\xa3\x73\xe0\x7d\x6c\xf9\xb3\xfe\xd1\x7e\x6b\xb7\x9f\xe4\xed\x87\xb3\x79\x31\xdb\x07\xb4\xfd\x7f\xc3\x7f\x01\x00\x00\xff\xff\x65\x7c\xb9\x29\xcd\x12\x00\x00")

func assetsReviewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReviewHtml,
		"assets/review.html",
	)
}

func assetsReviewHtml() (*asset, error) {
	bytes, err := assetsReviewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/review.html", size: 4813, mode: os.FileMode(416), modTime: time.Unix(1461770370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReviewsCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\x51\x4f\xdb\x30\x10\x7e\xf7\xaf\x38\x95\x17\x40\x6d\x0a\xac\x1a\x5b\x79\xca\x80\x6d\xd1\x50\x2b\x91\x32\xc4\xd3\xe4\xd8\x97\xc4\x9a\x6b\x7b\xb6\x43\xa8\xa6\xfd\xf7\x9d\xdb\xa2\x81\x46\xd2\x87\xca\xbe\xef\xfb\xee\xbb\xfb\x3c\x3d\x66\x97\xd6\x6d\xbc\x6a\xda\x08\x67\x27\xa7\xef\xe1\x8b\xb5\x8d\x46\x28\x8c\xc8\x20\xd7\x1a\xb6\xa5\x00\x1e\x03\xfa\x47\x94\x19\x63\x37\x4a\xa0\x09\x28\xa1\x33\x12\x3d\xc4\x16\x21\x77\x5c\xd0\xdf\xbe\x32\x86\xef\xe8\x83\xb2\x06\xce\xb2\x13\x38\x4c\x80\xd1\xbe\x34\x3a\xba\x60\x1b\xdb\xc1\x9a\x6f\xc0\xd8\x08\x5d\x40\x12\x50\x01\x6a\x45\x4d\xf1\x49\xa0\x8b\xa0\x0c\x08\xbb\x76\x5a\x71\x23\x10\x7a\x15\xdb\x6d\x93\xbd\x44\xc6\x1e\xf6\x02\xb6\x8a\x9c\xb0\x9c\xd0\x8e\x4e\xf5\x4b\x14\xf0\xc8\x18\xd0\xd7\xc6\xe8\xe6\xd3\x69\xdf\xf7\x19\xdf\xba\xcc\xac\x6f\xa6\x7a\x87\x0a\xd3\x9b\xe2\xf2\x7a\x51\x5e\x4f\xc8\x29\x63\x77\x46\x63\x48\xb3\xfe\xea\x94\xa7\x01\xab\x0d\x70\x47\x3e\x04\xaf\xc8\x9d\xe6\x3d\x58\x0f\xbc\xf1\x48\xb5\x68\x93\xcf\xde\xab\xa8\x4c\x33\x86\x60\xeb\xd8\x73\x8f\x4c\xaa\x10\xbd\xaa\xba\xf8\x6a\x41\xcf\xae\x68\xd2\x97\x00\x5a\x11\x37\x30\xca\x4b\x28\xca\x11\x7c\xca\xcb\xa2\x1c\xb3\xfb\x62\xf5\x75\x79\xb7\x82\xfb\xfc\xf6\x36\x5f\xac\x8a\xeb\x12\x96\xb7\x70\xb9\x5c\x5c\x15\xab\x62\xb9\xa0\xd3\x67\xc8\x17\x0f\xf0\xad\x58\x5c\x8d\x01\x69\x3d\xd4\x04\x9f\x9c\x4f\xde\xc9\xa0\x4a\xab\x4b\x49\x95\x88\xaf\x9a\xd7\x76\x67\x26\x38\x14\xaa\x56\x82\x26\x32\x4d\xc7\x1b\x84\xc6\x3e\xa2\x37\x34\x08\x38\xf4\x6b\x15\x52\x78\x81\xac\x49\xa6\xd5\x5a\x45\x1e\xb7\xe7\xff\xc6\xc9\xd8\xf1\x94\x65\x5c\x47\x22\xf3\x88\x3f\xbc\xed\xe7\x26\xb6\x13\xd1\x2a\x2d\x0f\xf1\x11\xcd\xd1\x6f\x0a\xa1\xe2\xe2\x67\xe3\x2d\xd1\x27\xc2\x6a\xeb\xe7\x70\x50\xcf\xd2\xef\x82\xfd\x19\xa6\x5b\x29\x07\xd9\xdb\x2f\xb1\x59\x26\x42\xa5\x3b\x84\x84\xdc\x95\x0f\x66\xe7\x1f\xce\x51\xee\xaa\x2d\x72\xf2\x3c\xa9\xb8\x87\x37\xb5\x0e\xf0\x1d\x7e\x4c\x52\x40\x2f\xca\x37\xca\x4c\xa2\x75\x73\x38\x3d\x73\x4f\x2f\xee\x2a\x1b\xa3\x5d\x3f\x5f\x27\x5d\x89\x41\x6c\x15\xfb\x56\x45\x9c\x04\x7a\x59\x38\x07\x8a\x60\x57\xb6\xb4\xb4\x94\xef\xdb\x3d\xff\x0d\xcf\xb2\xce\x88\x96\x52\xd8\x63\xdf\x56\xe3\x52\x0e\x6a\xf1\x59\x5d\xf3\xd9\xc5\x20\xd7\xe3\x9a\xb2\x1d\x74\x42\xdc\x41\xf6\xdf\x00\x00\x00\xff\xff\x51\x80\xb7\xe1\x1c\x04\x00\x00")

func assetsReviewsCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsReviewsCss,
		"assets/reviews.css",
	)
}

func assetsReviewsCss() (*asset, error) {
	bytes, err := assetsReviewsCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/reviews.css", size: 1052, mode: os.FileMode(416), modTime: time.Unix(1461770251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReviewsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x55\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\x66\x55\xa0\x68\x81\x48\x5a\x7b\x8b\xa0\x48\x6d\x17\xae\x93\xb6\x46\x17\x76\x11\x7b\x1b\xe4\x54\x50\xd4\x58\x62\x4a\x89\x2c\x87\x8e\x6d\x04\xfe\xf7\x0e\x65\xc5\x6b\xa7\x5b\x14\xed\x21\x97\xcd\xc5\x22\xe7\x91\xef\xcd\x9b\xe1\x64\xf0\xe6\x7a\x3e\x59\xde\xff\x7a\x03\x95\xaf\xf5\x28\x1a\xbc\x49\x92\x68\x62\xec\xce\xa9\xb2\xf2\xd0\x7f\xdb\xbb\x84\x9f\x8c\x29\x35\xc2\xb4\x91\x29\x8c\xb5\x86\x36\x44\xe0\x90\xd0\x3d\x62\x91\x46\xd1\x7b\x25\xb1\x21\x2c\x60\xdd\x14\xe8\xc0\x57\x08\x63\x2b\x24\xff\x74\x91\x0b\xf8\x0d\x1d\x29\xd3\x40\x3f\x7d\x0b\x5f\x05\x40\xdc\x85\xe2\xaf\xbf\x8b\x76\x66\x0d\xb5\xd8\x41\x63\x3c\xac\x09\xf9\x02\x45\xb0\x52\x4c\x8a\x5b\x89\xd6\x83\x6a\x40\x9a\xda\x6a\x25\x1a\x89\xb0\x51\xbe\x6a\x49\xba\x2b\xd2\xe8\xbe\xbb\xc0\xe4\x5e\x30\x56\x30\xda\xf2\x6a\x75\x8a\x02\xe1\xa3\x08\xf8\xaf\xf2\xde\x5e\x65\xd9\x66\xb3\x49\x45\xab\x32\x35\xae\xcc\xf4\x01\x45\xd9\xfb\xe9\xe4\x66\xb6\xb8\x49\x58\x69\x14\x7d\x68\x34\x52\xc8\xf5\xcf\xb5\x72\x9c\x60\xbe\x03\x61\x59\x87\x14\x39\xab\xd3\x62\x03\xc6\x81\x28\x1d\x72\xcc\x9b\xa0\x73\xe3\x94\x57\x4d\x79\x01\x64\x56\x7e\x23\x1c\x46\x85\x22\xef\x54\xbe\xf6\x67\x06\x3d\xab\xe2\x4c\x4f\x01\x6c\x91\x68\x20\x1e\x2f\x60\xba\x88\xe1\x87\xf1\x62\xba\xb8\x88\xee\xa6\xcb\x9f\xe7\x1f\x96\x70\x37\xbe\xbd\x1d\xcf\x96\xd3\x9b\x05\xcc\x6f\x61\x32\x9f\x5d\x4f\x97\xd3\xf9\x8c\x57\x3f\xc2\x78\x76\x0f\xbf\x4c\x67\xd7\x17\x80\x6c\x0f\x93\xe0\xd6\xba\xa0\x9d\x05\xaa\x60\x5d\xa8\xd4\x02\xf1\x8c\x7c\x65\x0e\x62\xc8\xa2\x54\x2b\x25\x39\xa3\xa6\x5c\x8b\x12\xa1\x34\x8f\xe8\x1a\x4e\x04\x2c\xba\x5a\x51\x28\x1e\xb1\xb4\x22\xd2\xaa\x56\x5e\xf8\x76\xfd\xb7\x74\xd2\x28\x49\xb8\x8b\xba\x66\xaa\x50\x14\x23\xf6\x7c\xe0\x95\xd7\x38\xba\xc5\x47\x85\x1b\x86\x92\x1f\x64\x87\xad\x10\xd4\xaa\xf9\x83\x1d\xd6\xc3\x98\xfc\x8e\xed\xae\x10\x7d\x0c\x95\xc3\xd5\x30\x0e\xb5\x22\x2e\x56\x2d\xb6\xb2\x68\xd2\xdc\x18\xcf\x5e\x09\x1b\x16\xdc\x11\xd9\x71\x23\x7b\x97\xbe\x4b\x2f\x33\x49\xf4\x71\x2f\xad\x15\xa3\x88\x62\xc8\xfe\x95\x28\xa3\x90\x93\xcc\x5c\xab\x91\x4e\x8f\x91\x74\x8a\x7b\x90\x9c\xfc\xa8\x47\x3c\x88\x6d\x5a\xb6\x0f\x43\x58\x45\xad\x96\xb0\xc7\x6d\x94\x53\x16\x4c\xd4\xc2\x3d\x50\xd6\x4b\xfb\x69\xff\xf2\x79\xa3\x15\xf4\x40\xf1\x68\x90\x1d\x2e\x65\x8f\xb2\x83\x49\x83\xdc\x14\xfc\x00\xca\x84\xdb\x6b\x18\x97\xca\x8f\xad\x75\x42\x11\xde\x61\x1e\xb7\x32\x0a\xf5\x18\xe2\xd2\x34\xde\x19\xad\xd1\x0d\x63\xcd\x4e\x1e\x4c\xa5\x16\xd3\xa1\xa4\x16\x44\xc3\x38\x20\xf9\x35\xa0\xeb\x62\xe7\x51\x67\x36\xc7\xfd\x97\xe7\x74\x52\x17\x49\xaf\x7f\x12\x67\x44\xd5\x7b\x06\x78\xdc\xfa\x84\xcb\xed\xb9\xf6\x92\x72\xbd\xc6\x98\x6b\x6b\x0d\x29\x6f\xdc\xee\x0a\x9e\x9e\xac\xf0\xd5\x7e\xcf\xb9\xf5\x4e\x28\x32\xe6\x38\x2a\x39\x5b\x9c\xcb\x82\xe0\x08\xba\x24\x17\xee\xbf\x29\xcc\x47\x73\x8b\x0d\x74\x8e\x5c\x0d\xb2\xfc\xff\xb0\x0b\xcd\x79\x35\xc2\xe3\xef\xc1\xa2\x60\xb9\x43\x8b\xc2\x73\xf4\xd0\xbf\xfc\xc8\x0d\xf3\x9c\x1b\xff\x0f\x12\xbf\x89\x47\x4f\x4f\x87\x73\xa9\x57\x35\x72\x97\xd5\x36\x38\x73\x22\xe0\x93\x07\xbf\x3d\x4f\x4d\x7c\xb2\x4d\xd3\xf0\xce\xbe\xf8\x9e\xf5\x99\x61\xa0\xb1\x66\xbf\xff\xf2\x10\x1a\x1e\x69\xc3\x4f\x78\xbd\xfb\xfd\x89\x16\x5a\xd7\xb5\x70\xbb\xa0\x44\xbc\x6e\x89\x26\xda\x84\xff\x14\xaf\x50\x24\xd9\x32\x7d\x46\x65\x3a\x7e\x76\x1f\x2f\x87\xd7\xcb\x19\xf7\x72\x12\x85\x11\xd4\x4e\xa4\x76\x7a\xff\x15\x00\x00\xff\xff\xa8\xb3\x6b\x1b\x1b\x08\x00\x00")

func assetsReviewsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReviewsHtml,
		"assets/reviews.html",
	)
}

func assetsReviewsHtml() (*asset, error) {
	bytes, err := assetsReviewsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/reviews.html", size: 2075, mode: os.FileMode(416), modTime: time.Unix(1461397271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReviewsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5f\x6f\xe3\xb8\x11\x7f\xae\x3e\xc5\x40\x58\xf4\xe4\x8d\x2c\x67\x0f\x45\x51\xd4\x48\x7b\x69\xb2\x77\x35\x1a\x24\x87\x38\xdb\xc5\x21\x5d\x2c\x14\x89\xb6\x89\xca\x92\x8e\xa4\xe2\x04\x45\xbe\x7b\x67\x48\x4a\x22\x25\xbb\xf1\xed\xee\x43\xf3\x10\x4b\x9c\x3f\xfc\xcd\x5f\x0e\x35\x7b\x1b\x5c\x54\xf5\xb3\xe0\xeb\x8d\x82\xef\x4f\xdf\xfd\x11\x7e\xaa\xaa\x75\xc1\x60\x51\x66\x09\x9c\x17\x05\x68\x92\x04\xc1\x24\x13\x8f\x2c\x4f\x82\xe0\x8a\x67\xac\x94\x2c\x87\xa6\xcc\x99\x00\xb5\x61\x70\x5e\xa7\x19\xfe\x58\x4a\x0c\xff\x64\x42\xf2\xaa\x84\xef\x93\x53\x88\x88\x21\xb4\xa4\x70\x32\x0f\x9e\xab\x06\xb6\xe9\x33\x94\x95\x82\x46\x32\x54\xc0\x25\xac\x38\x6e\xca\x9e\x32\x56\x2b\xe0\x25\x64\xd5\xb6\x2e\x78\x5a\x66\x0c\x76\x5c\x6d\xf4\x26\x56\x45\x12\xfc\x62\x15\x54\x0f\x2a\x45\xde\x14\xb9\x6b\x7c\x5b\xb9\x5c\x90\xaa\x20\x00\xfc\xdb\x28\x55\xff\x79\x36\xdb\xed\x76\x49\xaa\x51\x26\x95\x58\xcf\x0a\xc3\x25\x67\x57\x8b\x8b\xf7\xd7\xcb\xf7\x53\x44\x1a\x04\x1f\xca\x82\x49\xb2\xf5\xd7\x86\x0b\x34\xf0\xe1\x19\xd2\x1a\x71\x64\xe9\x03\xa2\x2b\xd2\x1d\x54\x02\xd2\xb5\x60\x48\x53\x15\xe1\xdc\x09\xae\x78\xb9\x8e\x41\x56\x2b\xb5\x4b\x05\x0b\x72\x2e\x95\xe0\x0f\x8d\xf2\x1c\xd4\xa2\x42\x4b\x5d\x06\x74\x51\x5a\x42\x78\xbe\x84\xc5\x32\x84\xbf\x9d\x2f\x17\xcb\x38\xf8\xb8\xb8\xfb\xfb\xcd\x87\x3b\xf8\x78\x7e\x7b\x7b\x7e\x7d\xb7\x78\xbf\x84\x9b\x5b\xb8\xb8\xb9\xbe\x5c\xdc\x2d\x6e\xae\xf1\xed\x47\x38\xbf\xfe\x05\xfe\xb1\xb8\xbe\x8c\x81\xa1\x7b\x70\x13\xf6\x54\x0b\xc2\x8e\x00\x39\xb9\x8e\x22\xb5\x64\xcc\xdb\x7c\x55\x19\x30\xb2\x66\x19\x5f\xf1\x0c\x2d\x2a\xd7\x4d\xba\x66\xb0\xae\x1e\x99\x28\xd1\x10\xa8\x99\xd8\x72\x49\xc1\x93\x08\x2d\x0f\x0a\xbe\xe5\x2a\x55\xfa\x7d\x64\x4e\x12\xbc\x9d\x05\xc1\x63\x2a\x60\xcd\xd5\x79\x5d\x8b\x94\x4b\xf6\x91\x3d\x9c\x91\xde\x22\x15\xc9\xb6\xca\x9b\x82\x45\xa1\x4f\x0e\x63\xb8\xff\x84\x89\x10\xcc\x66\xf0\x13\x53\x18\x40\xc1\xea\x4a\x72\x55\x09\xcc\x8a\x74\x8b\x48\x45\xb5\xd5\x1b\xad\x1a\x4c\xc1\x3a\x55\x9b\x24\x58\x35\x65\x46\x38\x60\xcd\xd4\x55\x2a\xd5\xcf\xb8\xfa\xbe\x60\x5b\x56\xaa\x88\x38\x26\xf0\x1f\x0c\x38\x81\x91\x45\x2a\x37\x0b\x04\xfb\x04\x67\x46\x18\x17\x94\x5e\xb8\x59\x45\xe1\x8c\x92\x10\x80\xaf\x20\x72\x38\xff\x02\xa7\x46\x03\x20\x1a\xd5\x88\xd2\x48\xca\xe6\x81\xc2\x55\xae\x1d\xde\x93\x77\xb1\x55\xcb\xca\x35\x6e\x4c\xda\x5e\x02\x4f\x6e\x1e\xbc\x78\xe6\x3d\x72\xb6\x03\xd9\x6c\xb7\x29\x9a\xe8\x5b\x97\x33\x99\x09\x5e\x93\x69\xbe\x91\x4b\xc3\x1e\x11\x43\x6f\x1c\x46\xb9\x29\x14\x1a\x46\xcb\x73\xbb\x58\xb2\x5d\xc1\x4b\xd6\xda\x4c\xa4\x84\xb7\xf6\xfe\xab\xec\x0d\xf6\x18\x3d\x93\x1d\xad\x8e\xd1\xa7\xb1\xa7\xbb\x33\x95\x74\x19\x19\xeb\x04\x54\xf6\xa7\xb1\x36\xcb\xe2\xe9\x43\xb6\x81\xc3\x0c\x57\xe7\x32\xfe\xc8\xa8\xa8\x15\xdf\x32\xa9\xd2\x6d\x0d\xa9\x34\x69\xcb\xb2\xaa\xcc\x65\xef\xbe\xa6\xe4\x4f\x80\x99\x93\x6d\xe2\x56\x15\x2d\x6f\x9a\x6d\x5a\x4e\x57\x82\xb3\x32\x2f\x9e\xe1\xd1\xf4\x22\xc7\xb7\x2d\xe9\xae\xdd\x21\xea\xf6\x32\x16\x58\x65\x68\x39\x5c\xa6\x8a\x61\x7a\x09\x89\x0e\x50\x2e\xdf\x5b\x78\x77\x7a\x7a\x3a\x49\x54\xb5\x34\xa6\x4d\xb4\x01\xdd\x26\x5a\xe6\x43\x89\x75\xc6\xf2\x4b\xbe\x5a\x45\x39\xfe\xeb\xc3\x48\xfd\x8e\x96\x25\xf9\x1c\x7f\x13\x89\x45\xab\x28\x58\xf4\x06\xd3\x29\x96\x0c\x98\xb8\xb5\xec\xc4\x7a\xff\x89\x56\xa8\x90\x23\xbd\x4c\x3d\xa8\x53\xd5\xba\x5f\x33\x27\x75\x23\x37\x06\xf9\x8f\x96\x21\xea\x38\xef\x57\x9f\x26\xc3\x28\x68\xa9\x39\x35\x4d\xdf\x86\x91\x74\xbb\x4d\x8b\xeb\x0a\xb3\x83\xb0\xb5\xf4\xde\x14\x83\xdf\x70\x16\x1b\x49\x9a\xae\xa9\xbc\xcf\x20\x0c\x7b\x8a\x38\x48\x41\x99\xeb\x66\xfb\x80\x4d\xe7\x0c\x4e\x3d\x81\x7d\xcb\x85\xc5\x61\x7c\xe4\x78\x89\xb7\x5e\xd2\x48\x5b\xf8\x46\x48\xb1\x27\x65\xb1\x6b\xea\x3d\xb7\xd2\x26\xc7\x89\x9c\x60\xc4\x85\x92\x1f\xb1\xd1\x46\xe1\x74\x3a\xc5\xb0\x90\x8e\xdf\xf9\x16\x19\xce\x2e\xd1\xff\x30\x69\xd5\xbc\x00\x2b\xa8\xf3\xef\xd3\x76\x72\x72\xd2\x6a\x13\x5f\xaf\xed\x87\x1f\xac\x32\x80\xde\x40\xaa\x16\xb2\xec\x67\xe4\xdb\xa3\x38\x36\x2b\x5d\xb3\x88\xc3\x49\xb7\x97\xf5\x50\x75\x58\xdc\x97\x3d\x09\x27\x56\x9d\xd7\x6f\xc7\x2a\x4b\xe4\xb9\x72\x82\xd8\xd5\x97\x0b\x76\x20\x53\xe1\x39\x84\x47\xe6\x45\xd5\x94\x04\xc4\x57\x31\xed\x53\xa5\x97\x72\xb3\xc7\x63\x9f\x6b\x6f\x8f\x77\xef\x2d\x75\xf6\x26\x4f\x7b\x7b\x3b\x5d\xd3\xee\x43\x79\x63\xca\xcd\x59\x05\xd3\x3e\xb0\x1e\x48\xa9\x4f\x71\xb0\xc5\x03\x82\x38\x44\x08\x2d\x88\x70\x44\x58\xfe\x9b\xd7\x35\x0e\x13\x21\x9c\xf8\x5e\xc2\xdc\xc2\x1e\x99\x6d\xf0\x34\x46\xb2\x86\xe9\x85\xe2\xe5\x88\x9c\x9a\xfa\x19\xe5\xd8\xea\x99\xd7\xdb\xe3\x58\x00\xa1\x60\x5b\x9c\x2c\x10\xf3\x30\x71\xde\x4d\x5c\x20\x9d\xf4\xc9\xc9\x51\x55\xf3\x55\x98\xd2\x3c\x7f\x1d\x91\xf8\x6d\x88\xe0\xab\x10\x75\x31\xfa\x02\x3f\xed\x87\x1a\xf4\xff\x9d\xb3\x8c\xfa\x4b\xe4\x74\xad\xd8\x6d\xbd\xb1\x41\x6d\x4f\x05\xf7\x14\x78\x05\x3e\xfa\x41\x35\xd2\x20\x6f\x9d\x40\x23\x7d\xe2\xd6\xdf\xa0\x3c\x35\xdd\xad\x41\xb1\x87\x6e\x14\x23\xd1\x3c\x38\x14\xdb\xb4\xe9\x67\x0c\xb7\xb5\xb2\xb3\xd0\x3c\xe4\xd6\x0a\x39\xc2\x68\x3a\xae\x7d\x1a\xe0\x33\x34\x31\xa2\x75\xda\xec\xf1\xad\x9f\x0d\x16\x44\xe3\x8f\xbb\x09\x8e\x2d\x4a\x54\x45\xc1\x44\x14\x16\x38\xfd\xdf\xd2\xb4\x8b\xb1\x6e\x21\x47\x6f\x24\xde\x60\x58\xfc\x86\xee\x2a\x06\x9e\x7e\x4c\x70\x08\xc4\x71\x35\xad\xf9\x4c\x0f\xc8\xe1\x04\x33\x23\xcb\x70\xcc\x37\xed\xa4\x93\xc7\x01\xaa\xc6\x01\x9d\xa1\xac\x51\x95\x74\x03\x35\xd7\x10\x6b\x51\x91\xd8\x55\xbb\xf9\xad\x15\xe8\x25\xe7\x2f\x93\xc1\xd9\xff\xaa\x88\x33\x06\xe8\xed\x0e\x1e\xbd\x43\x09\x23\x43\x63\xb2\x19\x11\x35\x11\x0f\xde\xc4\x4c\xce\x36\xad\x49\x65\x5f\x43\x84\x21\x72\x79\x79\x1e\x1f\xbc\x09\xb4\x35\xe3\x55\x80\x56\x38\x4e\x17\xad\x98\x94\xd1\xc5\xc3\xcb\x0d\x9e\x23\x3c\x9e\x3b\x51\x2f\x4d\x3a\x94\x36\x17\x30\xd6\xe4\xb4\x57\xa3\x4d\xc3\xff\xc1\x78\xc7\x6f\x8a\x2a\xd3\x17\x2c\x77\xc6\xaf\x2b\xdc\xa7\xa3\x24\x92\xa5\x22\xdb\x44\x93\xfb\xef\x88\xf4\x9d\xf6\xb2\x13\x69\xed\xc6\xba\x9a\x1f\x48\x9c\xcf\xf6\xe2\xf1\x57\x7a\x39\xa3\x63\x82\x1e\x8e\x4f\x26\x1b\xa9\x3d\xde\x6e\x79\x35\x8b\xc9\xa1\x31\x04\x54\x51\x7e\x36\x57\x20\xf9\xa5\x10\x48\x87\x75\xe4\x30\x9d\xf5\xe2\x81\x84\x1e\x83\xc9\x8a\x4a\xb2\xfc\x6b\xe1\x18\x2d\x5f\x00\xe8\x60\x85\x1d\x10\xf2\x6a\xac\xdd\xed\xb7\x54\x19\x49\xe9\x4f\x31\x7e\xa5\xb5\xcb\x73\x77\x14\xee\x2e\x5c\x43\xde\x5f\x1b\x24\x24\x1d\xdd\x15\xa2\xfb\xe2\x01\x7e\xe7\x62\xdb\x17\xb5\xb6\xc1\x2d\x6b\x5a\x88\x5a\x38\x71\x0f\x22\xd6\xaa\xe3\xd1\x45\xf8\x40\x6d\x6b\xbd\xfb\xaa\xfb\x35\xfd\xb6\x36\xbc\xca\xf7\x9c\xe6\x3a\xca\x9c\x3e\x8e\x9f\xfe\xd7\x55\xd2\x3d\x2e\x8c\x97\xda\x2b\x7b\x7b\xc0\xd9\xef\x01\x67\x2d\x88\xe3\x9a\x0a\x7a\xc4\x98\xf5\xcd\x5b\x4a\x9f\x66\x07\x59\x89\x68\xfb\xcf\xff\x5f\xa7\x31\xf0\x3e\xe7\x4c\xa5\xbc\x18\x14\x37\x4d\xc3\xbf\x37\x0c\x76\x8d\x1e\x8f\x87\x66\x95\xea\x71\x84\x46\x33\xbe\xea\x83\x2e\x5f\x6d\x3b\x2d\x32\x1c\x15\xbe\x11\x2c\x5b\x51\x2d\x3a\xfa\x68\xd0\x97\xe1\x7c\x4c\x4d\xda\x4f\x08\xa3\x0f\x13\x9d\x6b\x29\xc9\xd0\xd7\xb2\xad\xb0\x41\xbf\xea\xec\xbe\xa8\xb6\x14\x13\xc7\xfc\xcc\xae\x6c\x04\x4b\x73\xb7\x69\xb9\xb5\xe2\x31\x25\xf6\x6d\xd8\x55\x5e\x61\x3a\xaa\xe4\xfc\xbe\x38\xd0\xb8\xe1\x45\x2e\x58\xd9\x7b\xf0\x58\xb3\x3a\x51\xec\x71\x4e\x0f\x7a\xd9\xef\x23\x2f\x37\x28\xa4\x97\x26\x7f\xba\x6f\x34\x83\xde\xed\xb0\xe8\x23\x1d\xaf\x16\xc3\x46\x4e\x8b\xb6\x23\x8d\x78\x9d\xcf\x16\xe3\x56\x4e\x1c\xe3\xee\x3d\x5c\x3f\xca\xb5\x2f\xaf\x82\xb7\x3e\x93\x47\x39\x78\xbf\xa8\xef\xe0\x41\x93\xb7\xcc\x7d\xab\xfc\x6f\x00\x00\x00\xff\xff\x98\x8f\x55\xa0\xc3\x18\x00\x00")

func assetsReviewsJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsReviewsJs,
		"assets/reviews.js",
	)
}

func assetsReviewsJs() (*asset, error) {
	bytes, err := assetsReviewsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/reviews.js", size: 6339, mode: os.FileMode(416), modTime: time.Unix(1461735944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/assets.go":    assetsAssetsGo,
	"assets/repos.html":   assetsReposHtml,
	"assets/review.html":  assetsReviewHtml,
	"assets/reviews.css":  assetsReviewsCss,
	"assets/reviews.html": assetsReviewsHtml,
	"assets/reviews.js":   assetsReviewsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"assets.go":    &bintree{assetsAssetsGo, map[string]*bintree{}},
		"repos.html":   &bintree{assetsReposHtml, map[string]*bintree{}},
		"review.html":  &bintree{assetsReviewHtml, map[string]*bintree{}},
		"reviews.css":  &bintree{assetsReviewsCss, map[string]*bintree{}},
		"reviews.html": &bintree{assetsReviewsHtml, map[string]*bintree{}},
		"reviews.js":   &bintree{assetsReviewsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
